from colorama import Fore, Style, init

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Colorama (—â–æ–± –ø—Ä–∞—Ü—é–≤–∞–ª–æ —ñ –Ω–∞ Windows, —ñ –≤ Linux)
init(autoreset=True)

# –†—ñ–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–ø—Ä–µ—Ñ—ñ–∫—Å–∏ + –∫–æ–ª—å–æ—Ä–∏)
LEVELS = {
    "system":    {"prefix": "üñ•Ô∏è:", "color": Fore.CYAN},
    "info":      {"prefix": "‚ÑπÔ∏è:", "color": Fore.BLUE},
    "success":   {"prefix": "‚úÖ:", "color": Fore.GREEN},
    "warning":   {"prefix": "‚ö†Ô∏è:", "color": Fore.YELLOW},
    "error":     {"prefix": "‚ùå:", "color": Fore.RED},
    "external_error": {"prefix": "üîå API ERROR:", "color": Fore.MAGENTA},
}

class Notifier:
    @staticmethod
    def _print(level: str, message: str):
        """–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –º–µ—Ç–æ–¥ –¥–ª—è –¥—Ä—É–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∑–∞–¥–∞–Ω–∏–º —Ä—ñ–≤–Ω–µ–º."""
        style = LEVELS.get(level, LEVELS["info"])
        print(f"{style['color']}{style['prefix']} {message}{Style.RESET_ALL}")

    @staticmethod
    def blank():
        print()

    @classmethod
    def system(cls, message: str):
        cls._print("system", message)

    @classmethod
    def info(cls, message: str):
        cls._print("info", message)

    @classmethod
    def success(cls, message: str):
        cls._print("success", message)

    @classmethod
    def warning(cls, message: str):
        cls._print("warning", message)

    @classmethod
    def error(cls, message: str):
        cls._print("error", message)

    @classmethod
    def external_error(cls, message: str):
        cls._print("external_error", message)
